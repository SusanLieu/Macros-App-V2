{"remainingRequest":"/Users/susanlieu/Macros-App-V2/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/susanlieu/Macros-App-V2/client/src/views/DiaryT.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/susanlieu/Macros-App-V2/client/src/views/DiaryT.vue","mtime":1571152884433},{"path":"/Users/susanlieu/Macros-App-V2/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/susanlieu/Macros-App-V2/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { Api } from '@/Api'\nimport moment from 'moment'\n\nexport default {\n  name: 'Diary',\n  data() {\n    return {\n      date: moment().format('dddd MMMM Do YYYY'),\n      add: 'add',\n      subtract: 'subtract',\n      diary: {},\n      diet: {},\n      breakfastMeals: [],\n      lunchMeals: [],\n      dinnerMeals: [],\n      snackMeals: [],\n      macrosMaxInGrams: {\n        protein: 0,\n        carbs: 0,\n        fat: 0\n      },\n      currentDietValues: {\n        calories: 0,\n        protein: 0,\n        carbs: 0,\n        fat: 0\n      },\n      remaining: {\n        calories: 0,\n        protein: 0,\n        carbs: 0,\n        fat: 0,\n      }\n      // macroBars: [\n      //   { name: 'Protein', variant: 'secondary', value: 20, max: 80},\n      //   { name: 'Carbs', variant: 'info', value: 20, max: 40},\n      //   { name: 'Fat', variant: 'warning', value: 20, max: 20}\n      // ]\n    }\n  },\n  created() {\n    var diet_id = this.$cookies.get('diet')\n    var diary_id = this.$cookies.get('diary')\n    this.getMeals()\n    Api.get(`/diaries/${diary_id}`)\n      .then(response => {\n        this.diary = response.data\n        localStorage.setItem('access_token', this.diary.account)\n        this.$bus.$emit('logged', 'User logged')\n      })\n      .catch(error => {\n        console.log(error)\n      })\n    Api.get(`/diets/${diet_id}`)\n      .then(response => {\n        this.diet = response.data\n        this.getMacrosMax(response.data)\n      })\n      .catch(error => {\n        console.log(error)\n      })\n  },\n  methods: {\n    switchDate(change) {\n      var currentDate = this.date\n      if(change === 'add'){\n        this.date = moment(currentDate, 'dddd MMMM Do YYYY').add(1, 'days').format('dddd MMMM Do YYYY')\n      }\n      if(change === 'subtract'){\n        this.date = moment(currentDate, 'dddd MMMM Do YYYY').subtract(1, 'days').format('dddd MMMM Do YYYY')\n      }\n      this.getMeals()\n    },\n    getMeals() {\n      this.breakfastMeals = []\n      this.lunchMeals = []\n      this.dinnerMeals = []\n      this.snackMeals = []\n      var diary_id = this.$cookies.get('diary')\n      Api.get(`diaries/${diary_id}/meals?filter=${this.date}`)\n      .then(response => {\n        this.filterMeals(response.data.meals)\n        this.calculateCurrent(response.data.meals)\n      })\n      .catch(error => {\n        console.log(error)\n      })\n    },\n    filterMeals(meals) {\n      for (var i = 0; i < meals.length; i++) {\n        if (meals[i].mealType === 'breakfast') {\n          this.breakfastMeals.push(meals[i])\n        }\n        if (meals[i].mealType === 'lunch') {\n          this.lunchMeals.push(meals[i])\n        }\n        if (meals[i].mealType === 'dinner') {\n          this.dinnerMeals.push(meals[i])\n        }\n        if (meals[i].mealType === 'snack') {\n          this.snackMeals.push(meals[i])\n        }\n      }\n    },\n    print(date){\n      alert('Changed')\n      console.log(toString(date))\n    },\n    getMacrosMax(diet) {\n      this.macrosMaxInGrams.protein = this.round((((diet.protein / 100) * diet.calories) / 4), 1)\n      this.macrosMaxInGrams.carbs = this.round((((diet.carbs / 100) * diet.calories) / 4), 1)\n      this.macrosMaxInGrams.fat = this.round((((diet.fat / 100) * diet.calories) / 9), 1)\n    },\n    calculateCurrent(meals){\n      var caloriesValue = 0\n      var proteinValue = 0\n      var carbsValue = 0\n      var fatValue = 0\n      meals.forEach(meal => {\n        caloriesValue += meal.calories\n        proteinValue += meal.protein\n        carbsValue += meal.carbs\n        fatValue += meal.fat\n      })\n      this.currentDietValues = {\n        calories: this.round(caloriesValue, 1),\n        protein: this.round(proteinValue, 1),\n        carbs: this.round(carbsValue, 1),\n        fat: this.round(fatValue, 1)\n      }\n    },\n    deleteMeal(mealid){\n      if(confirm('Are you sure?'))\n      Api.delete(`/meals/${mealid}`)\n        .then(response => {\n          this.deleteFromDiary(response.data)\n          // this.getMeals()\n          // recalculate by taking away the meals properties with another method\n          this.alterCurrentDietValues(response.data)\n        })\n        .catch(error => {\n          console.log(error)\n        })\n    },\n    deleteFromDiary(deletedMeal) {\n      if(deletedMeal.mealType === 'breakfast'){\n        var index = this.breakfastMeals.findIndex(meal => meal._id === deletedMeal._id)\n        this.breakfastMeals.splice(index, 1)\n      }\n      if(deletedMeal.mealType === 'lunch'){\n        var index = this.lunchMeals.findIndex(meal => meal._id === deletedMeal._id)\n        this.lunchMeals.splice(index, 1)\n      }\n      if(deletedMeal.mealType === 'dinner'){\n        var index = this.dinnerMeals.findIndex(meal => meal._id === deletedMeal._id)\n        this.dinnerMeals.splice(index, 1)\n      }\n      if(deletedMeal.mealType === 'snack'){\n        var index = this.snackMeals.findIndex(meal => meal._id === deletedMeal._id)\n        this.snackMeals.splice(index, 1)\n      }\n    },\n    alterCurrentDietValues(meal) {\n      this.currentDietValues.calories = this.round((this.currentDietValues.calories - meal.calories), 1)\n      this.currentDietValues.protein = this.round((this.currentDietValues.protein - meal.protein), 1)\n      this.currentDietValues.carbs = this.round((this.currentDietValues.carbs - meal.carbs), 1)\n      this.currentDietValues.fat = this.round((this.currentDietValues.fat - meal.fat), 1)\n    },\n    round(value, precision) {\n    var multiplier = Math.pow(10, precision || 0);\n    return Math.round(value * multiplier) / multiplier;\n    }\n  }\n}\n",{"version":3,"sources":["DiaryT.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkfile":"DiaryT.vue","sourceRoot":"src/views","sourcesContent":["<template>\n    <div id=\"diaryT\" class=\"background\">\n      <h2 class=\"heading\">\n        <span class=\"heading-highlight\">Diary</span>\n      </h2>\n        <b-container>\n          <div style=\"padding-bottom: 1em;\">\n            <b-button @click=\"switchDate(subtract)\">Prev </b-button>\n              {{date}}\n              <b-button @click=\"switchDate(add)\">Next </b-button>\n          </div>\n            <b-row align-h=\"center\">\n                <b-col cols=\"5\">\n                  <b-card class=\"shadow\" header-class=\"diary-card\" header-bg-variant=\"dark\" header-text-variant =\"white\" border-variant=\"dark\" header=\"Daily Summary\" align=\"center\">\n                        <div id=\"progressBar\">\n                          <div class=\"row mb-2 mt-3\">\n                          <div class=\"col-sm-3\">Calories:</div>\n                          <div class=\"col-sm-9 pt-1\">\n                              <b-progress :max=\"diet.calories\" show-value animated>\n                                <b-progress-bar :value=\"currentDietValues.calories\">\n                                 {{ currentDietValues.calories }} / {{ diet.calories }}\n                                </b-progress-bar>\n                              </b-progress>\n                          </div>\n                          </div>\n                            <h5>Macros Split</h5>\n                            <div class=\"row mb-1\">\n                            <div class=\"col-sm-3\">Protein:</div>\n                            <div class=\"col-sm-9 pt-1\">\n                              <b-progress :max=\"macrosMaxInGrams.protein\" show-value>\n                                  <b-progress-bar variant=\"secondary\" :value=\"currentDietValues.protein\">\n                                  {{ currentDietValues.protein }} / {{ macrosMaxInGrams.protein }}\n                                  </b-progress-bar>\n                                </b-progress>\n                            </div>\n                            </div>\n                            <div class=\"row mb-1\">\n                            <div class=\"col-sm-3\">Carbs:</div>\n                            <div class=\"col-sm-9 pt-1\">\n                              <b-progress :max=\"macrosMaxInGrams.carbs\" show-value>\n                                  <b-progress-bar variant=\"info\" :value=\"currentDietValues.carbs\">\n                                  {{ currentDietValues.carbs }} / {{ macrosMaxInGrams.carbs }}\n                                  </b-progress-bar>\n                                </b-progress>\n                            </div>\n                            </div>\n                            <div class=\"row mb-1\">\n                            <div class=\"col-sm-3\">Fat:</div>\n                            <div class=\"col-sm-9 pt-1\">\n                              <b-progress :max=\"macrosMaxInGrams.fat\" show-value>\n                                  <b-progress-bar variant=\"warning\" :value=\"currentDietValues.fat\">\n                                  {{ currentDietValues.fat }} / {{ macrosMaxInGrams.fat }}\n                                  </b-progress-bar>\n                                </b-progress>\n                            </div>\n                            </div>\n\n                            <!-- <div v-for=\"bar in macroBars\" :key=\"bar.name\" class=\"row mb-1\">\n                              <div class=\"col-sm-3\">{{ bar.name }}:</div>\n                              <div class=\"col-sm-9 pt-1\">\n                                <b-progress :value=\"bar.value\" :variant=\"bar.variant\" :max=\"bar.max\" :key=\"bar.variant\" show-value></b-progress>\n                              </div>\n                            </div> -->\n                        </div>\n                        <div class=\"text-left\">\n                          <strong><h4>Remaining</h4></strong>\n                            <strong>Calories:</strong> {{round((diet.calories - currentDietValues.calories), 1)}} kcal<br>\n                            <strong>Protein:</strong> {{round((macrosMaxInGrams.protein - currentDietValues.protein), 1)}}g<br>\n                            <strong>Carbs:</strong> {{round((macrosMaxInGrams.carbs - currentDietValues.carbs), 1)}}g<br>\n                            <strong>Fat:</strong> {{round((macrosMaxInGrams.fat - currentDietValues.fat), 1)}}g\n                        </div>\n                  </b-card>\n                </b-col>\n                <b-col cols=\"7\">\n                  <b-card class=\"shadow mb-4\" border-variant=\"dark\" align=\"center\">\n                   <template v-slot:header header=\"Meals\" header-class=\"text-left\">\n                    <div class=\"float-left diary-card\">Meals</div>\n                    <router-link :to=\"{ name: 'meal', params: {date: date} }\" class=\"router-link-color\"><i class=\"material-icons md-28 icon float-right\">add_circle</i></router-link>\n                  </template>\n                     <h5>Breakfast</h5>\n                    <div class=\"text-left\" v-for=\"meal in breakfastMeals\" :key=\"meal._id\">\n                        <b-button type=\"button\" class=\"close\" @click=\"deleteMeal(meal._id)\">&times;</b-button>\n                        <strong>{{meal.amount}}g {{ meal.name }}</strong><br>\n                        Calories: {{ meal.calories }} Protein: {{meal.protein}} Carbs: {{meal.carbs}} Fat: {{meal.fat}}\n                    </div>\n                    <hr>\n                    <h5>Lunch</h5>\n                    <div class=\"text-left\" v-for=\"meal in lunchMeals\" :key=\"meal._id\">\n                        <b-button type=\"button\" class=\"close\" @click=\"deleteMeal(meal._id)\">&times;</b-button>\n                        <strong>{{meal.amount}}g {{ meal.name }}</strong><br>\n                        Calories: {{ meal.calories }} Protein: {{meal.protein}} Carbs: {{meal.carbs}} Fat: {{meal.fat}}\n                    </div>\n                    <hr>\n                    <h5>Dinner</h5>\n                    <div class=\"text-left\" v-for=\"meal in dinnerMeals\" :key=\"meal._id\">\n                        <b-button type=\"button\" class=\"close\" @click=\"deleteMeal(meal._id)\">&times;</b-button>\n                        <strong>{{meal.amount}}g {{ meal.name }}</strong><br>\n                        Calories: {{ meal.calories }} Protein: {{meal.protein}} Carbs: {{meal.carbs}} Fat: {{meal.fat}}\n                    </div>\n                    <hr>\n                    <h5>Snack</h5>\n                    <div class=\"text-left\" v-for=\"meal in snackMeals\" :key=\"meal._id\">\n                      <b-button type=\"button\" class=\"close\" @click=\"deleteMeal(meal._id)\">&times;</b-button>\n                        <strong>{{meal.amount}}g {{ meal.name }}</strong><br>\n                        Calories: {{ meal.calories }} Protein: {{meal.protein}} Carbs: {{meal.carbs}} Fat: {{meal.fat}}\n                    </div>\n                  </b-card>\n                </b-col>\n            </b-row>\n        </b-container>\n    </div>\n</template>\n\n<script>\nimport { Api } from '@/Api'\nimport moment from 'moment'\n\nexport default {\n  name: 'Diary',\n  data() {\n    return {\n      date: moment().format('dddd MMMM Do YYYY'),\n      add: 'add',\n      subtract: 'subtract',\n      diary: {},\n      diet: {},\n      breakfastMeals: [],\n      lunchMeals: [],\n      dinnerMeals: [],\n      snackMeals: [],\n      macrosMaxInGrams: {\n        protein: 0,\n        carbs: 0,\n        fat: 0\n      },\n      currentDietValues: {\n        calories: 0,\n        protein: 0,\n        carbs: 0,\n        fat: 0\n      },\n      remaining: {\n        calories: 0,\n        protein: 0,\n        carbs: 0,\n        fat: 0,\n      }\n      // macroBars: [\n      //   { name: 'Protein', variant: 'secondary', value: 20, max: 80},\n      //   { name: 'Carbs', variant: 'info', value: 20, max: 40},\n      //   { name: 'Fat', variant: 'warning', value: 20, max: 20}\n      // ]\n    }\n  },\n  created() {\n    var diet_id = this.$cookies.get('diet')\n    var diary_id = this.$cookies.get('diary')\n    this.getMeals()\n    Api.get(`/diaries/${diary_id}`)\n      .then(response => {\n        this.diary = response.data\n        localStorage.setItem('access_token', this.diary.account)\n        this.$bus.$emit('logged', 'User logged')\n      })\n      .catch(error => {\n        console.log(error)\n      })\n    Api.get(`/diets/${diet_id}`)\n      .then(response => {\n        this.diet = response.data\n        this.getMacrosMax(response.data)\n      })\n      .catch(error => {\n        console.log(error)\n      })\n  },\n  methods: {\n    switchDate(change) {\n      var currentDate = this.date\n      if(change === 'add'){\n        this.date = moment(currentDate, 'dddd MMMM Do YYYY').add(1, 'days').format('dddd MMMM Do YYYY')\n      }\n      if(change === 'subtract'){\n        this.date = moment(currentDate, 'dddd MMMM Do YYYY').subtract(1, 'days').format('dddd MMMM Do YYYY')\n      }\n      this.getMeals()\n    },\n    getMeals() {\n      this.breakfastMeals = []\n      this.lunchMeals = []\n      this.dinnerMeals = []\n      this.snackMeals = []\n      var diary_id = this.$cookies.get('diary')\n      Api.get(`diaries/${diary_id}/meals?filter=${this.date}`)\n      .then(response => {\n        this.filterMeals(response.data.meals)\n        this.calculateCurrent(response.data.meals)\n      })\n      .catch(error => {\n        console.log(error)\n      })\n    },\n    filterMeals(meals) {\n      for (var i = 0; i < meals.length; i++) {\n        if (meals[i].mealType === 'breakfast') {\n          this.breakfastMeals.push(meals[i])\n        }\n        if (meals[i].mealType === 'lunch') {\n          this.lunchMeals.push(meals[i])\n        }\n        if (meals[i].mealType === 'dinner') {\n          this.dinnerMeals.push(meals[i])\n        }\n        if (meals[i].mealType === 'snack') {\n          this.snackMeals.push(meals[i])\n        }\n      }\n    },\n    print(date){\n      alert('Changed')\n      console.log(toString(date))\n    },\n    getMacrosMax(diet) {\n      this.macrosMaxInGrams.protein = this.round((((diet.protein / 100) * diet.calories) / 4), 1)\n      this.macrosMaxInGrams.carbs = this.round((((diet.carbs / 100) * diet.calories) / 4), 1)\n      this.macrosMaxInGrams.fat = this.round((((diet.fat / 100) * diet.calories) / 9), 1)\n    },\n    calculateCurrent(meals){\n      var caloriesValue = 0\n      var proteinValue = 0\n      var carbsValue = 0\n      var fatValue = 0\n      meals.forEach(meal => {\n        caloriesValue += meal.calories\n        proteinValue += meal.protein\n        carbsValue += meal.carbs\n        fatValue += meal.fat\n      })\n      this.currentDietValues = {\n        calories: this.round(caloriesValue, 1),\n        protein: this.round(proteinValue, 1),\n        carbs: this.round(carbsValue, 1),\n        fat: this.round(fatValue, 1)\n      }\n    },\n    deleteMeal(mealid){\n      if(confirm('Are you sure?'))\n      Api.delete(`/meals/${mealid}`)\n        .then(response => {\n          this.deleteFromDiary(response.data)\n          // this.getMeals()\n          // recalculate by taking away the meals properties with another method\n          this.alterCurrentDietValues(response.data)\n        })\n        .catch(error => {\n          console.log(error)\n        })\n    },\n    deleteFromDiary(deletedMeal) {\n      if(deletedMeal.mealType === 'breakfast'){\n        var index = this.breakfastMeals.findIndex(meal => meal._id === deletedMeal._id)\n        this.breakfastMeals.splice(index, 1)\n      }\n      if(deletedMeal.mealType === 'lunch'){\n        var index = this.lunchMeals.findIndex(meal => meal._id === deletedMeal._id)\n        this.lunchMeals.splice(index, 1)\n      }\n      if(deletedMeal.mealType === 'dinner'){\n        var index = this.dinnerMeals.findIndex(meal => meal._id === deletedMeal._id)\n        this.dinnerMeals.splice(index, 1)\n      }\n      if(deletedMeal.mealType === 'snack'){\n        var index = this.snackMeals.findIndex(meal => meal._id === deletedMeal._id)\n        this.snackMeals.splice(index, 1)\n      }\n    },\n    alterCurrentDietValues(meal) {\n      this.currentDietValues.calories = this.round((this.currentDietValues.calories - meal.calories), 1)\n      this.currentDietValues.protein = this.round((this.currentDietValues.protein - meal.protein), 1)\n      this.currentDietValues.carbs = this.round((this.currentDietValues.carbs - meal.carbs), 1)\n      this.currentDietValues.fat = this.round((this.currentDietValues.fat - meal.fat), 1)\n    },\n    round(value, precision) {\n    var multiplier = Math.pow(10, precision || 0);\n    return Math.round(value * multiplier) / multiplier;\n    }\n  }\n}\n</script>\n\n<style>\n#diary {\n  text-align: center;\n}\n\n#progressBar {\n    padding-bottom: 3em;\n}\n\nh5 {\n    padding-top: 1em;\n}\n\n.icon {\n  display: flex;\n  justify-content: center;\n}\n\n.diary-card {\n  font-weight: bold;\n  font-size: 1.2em;\n}\n\n.material-icons.md-28 {\n  font-size: 28px;\n}\n\n.router-link-color {\n  color: #2c3e50;\n}\n\n/* .background {\n  background-color: #f0f5f5;\n  background-size: cover;\n  background-position: center;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n}  */\n</style>\n"]}]}